apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group='com.github.Deemonser'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    lintOptions {
        abortOnError false
        warning 'InvalidPackage'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.9'

    compile project(':annotation')
}

//// Jar
//task androidJar(type: Jar) {
//    dependsOn assemble
//    group 'Build'
//    description 'blah blah'
//    from zipTree(
//            'build/intermediates/bundles/default/classes.jar')
//    from zipTree(
//            '../routerapt/build/libs/routerapt.jar')
//    from zipTree(
//            '../annotation/build/libs/annotation.jar')
//
//}
//
//
//
//// javadoc tasks
//android.libraryVariants.all { variant ->
//    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
//        description "Generates Javadoc for $variant.name."
//        group 'Docs'
//        source = variant.javaCompile.source
//        source "../annotation/src/main/java"
//
//        exclude '**/BuildConfig.java'
//        exclude '**/R.java'
//    }
//}



////添加
//publish {
//    artifactId = 'modulerouter-core'
//    userOrg = rootProject.userOrg
//    groupId = rootProject.groupId
//    uploadName = rootProject.uploadName
//    publishVersion = rootProject.publishVersion
//    desc = rootProject.description
//    website = rootProject.website
//    licences = rootProject.licences
//    dryRun = rootProject.dryRun
//}

//task copyJar(type: Copy) {
//    from('build/libs/permission-lib.jar')
//    into('../output/')
//    rename ('permission-lib.jar', 'mpermissions.jar')
//}